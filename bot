import os
from dotenv import load_dotenv

import json

import logging

from aiogram import Bot, Dispatcher, executor, types
from aiogram.dispatcher import FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

with open("games.json", "r", encoding="utf-8") as file:
    games = json.load(file)

TOKEN=os.getenv('TOKEN')

logging.basicConfig(level=logging.INFO)

bot = Bot(token='6845995826:AAFI2WAEwA2Wn2hpDlMH2dQWi3plFctGDkE')
dp = Dispatcher(bot, storage=MemoryStorage())

ADMINS = [557997323]


@dp.message_handler(commands='start')
async def start(message: types.Message):
    game_choice = InlineKeyboardMarkup()
    for game in games:
        button = InlineKeyboardButton(text=game, callback_data=game)
        game_choice.add(button)
    await message.answer(text='–ü—Ä–∏–≤—ñ—Ç! –Ø - —ñ–≥—Ä–æ–±–æ—ÇüéÆ\n–û–±–µ—Ä–∏ –≥—Ä—É, –ø—Ä–æ —è–∫—É —Ö–æ—á–µ—à –¥—ñ–∑–Ω–∞—Ç–∏—Å—å.üòâ', reply_markup=game_choice)

@dp.message_handler(commands='list_games')
async def list_games(message: types.Message):
    game_choice = InlineKeyboardMarkup()
    for game in games.keys():
        button = InlineKeyboardButton(text=game, callback_data=game)
        game_choice.add(button)
    await message.answer(text='–°–ø–∏—Å–æ–∫ –Ω–∞—è–≤–Ω–∏—Ö —ñ–≥–æ—ÄüéÆ:', reply_markup=game_choice)

@dp.callback_query_handler()
async def get_game_into(callback_query: types.CallbackQuery):
    if callback_query.data in games.keys():
        await bot.send_photo(callback_query.message.chat.id, games[callback_query.data]['photo'])
        url= games[callback_query.data]['site_url']
        game_ratting = games[callback_query.data]['rating']
        game_description = games[callback_query.data]["description"]
        message = f'<b>Game url:</b> {url}\n\n<b>About:</b> {game_description}\n\n<b>Rate:</b> {game_ratting}'
        await bot.send_message(callback_query.message.chat.id, message, parse_mode='html')
    else:
        await bot.send_message(callback_query.message.chat.id, '–ì—Ä—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.üò•')

@dp.message_handler(commands='add_game')
async def add_new_game(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    if user_id in ADMINS:
        await message.answer(text='–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –≥—Ä–∏, —â–æ–± –¥–æ–¥–∞—Ç–∏ –Ω–æ–≤—É:')
        await state.set_state('set_game_name')
    else:
        await message.answer(text='–í–∏ –Ω–µ–º–æ–∂–µ—Ç–µ –¥–æ–¥–∞—Ç–∏ –≥—Ä—É: –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –ø—Ä–∞–≤ –¥–ª—è —Ü—ñ—î—ó –¥—ñ—ó.üò¢')

@dp.message_handler(commands='cancel_add_remove', state='*')
async def cancel_handler(message: types.Message, state: FSMContext):
    await message.answer('–î–æ–¥–∞–≤–∞–Ω–Ω—è/–í–∏–¥–∞–ª–µ–Ω–Ω—è –≥—Ä–∏ —Å–∫–∞—Å–æ–≤–∞–Ω–æ.üö´')
    await state.finish()
    
@dp.message_handler(commands='remove_game')
async def remove_game(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    if user_id in ADMINS:
        await message.answer('–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –≥—Ä–∏, —è–∫—É –≤–∏ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏:')
        await state.set_state('confirm_remove_game')
    else:
        await message.answer('–í–∏ –Ω–µ –º–∞—î—Ç–µ –ø—Ä–∞–≤ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –≥—Ä–∏.üò¢')

@dp.message_handler(state='confirm_remove_game')
async def confirm_remove_game(message: types.Message, state: FSMContext):
    game_to_remove = message.text
    if game_to_remove in games:
        del games[game_to_remove]
        with open("games.json", "w", encoding="utf-8") as file:
            json.dump(games, file, indent=4, ensure_ascii=False)
        await message.answer(f'–ì—Ä—É "{game_to_remove}" –≤–∏–¥–∞–ª–µ–Ω–æ –∑ –±—ñ–±–ª—ñ–æ—Ç–µ–∫–∏.üòé')
    else:
        await message.answer('–ì—Ä—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.üò•')
    await state.finish()


game_name = ''

@dp.message_handler(state='set_game_name')
async def set_game_name(message: types.Message, state: FSMContext):
    global game_name
    if len(message.text) > 64:
        await message.answer(text='–ù–∞ –∂–∞–ª—å —è –Ω–µ –º–æ–∂—É –¥–æ–¥–∞—Ç–∏ —Ü—é –≥—Ä—É: –¥–æ–≤–∂–∏–Ω–∞ –Ω–∞–∑–≤–∏ –Ω–µ –º–∞—î –ø–µ—Ä–µ–≤–∏—â—É–≤–∞—Ç–∏ 64 —Å–∏–º–≤–æ–ª–∏.üôÅ')
    else:
        game_name = message.text
        games[game_name] = {}
        await state.set_state('set_site_url')
        await message.answer(text='–ß—É–¥–æ–≤–æ. –¢–µ–ø–µ—Ä –≤–≤–µ–¥–∏ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –∑ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é –Ω–∞ –≤–µ–±—Å–∞–π—Ç:')
        
@dp.message_handler(state='set_site_url')
async def set_site_url(message: types.Message, state: FSMContext):
    global game_name
    game_site_url = message.text
    games[game_name]['site_url'] = game_site_url
    await state.set_state('set_description')
    await message.answer(text='–ß—É–¥–æ–≤–æ. –†–æ–∑–∫–∞–∂–∏ —â–æ—Å—å —Ü—ñ–∫–∞–≤–µ –ø—Ä–æ —Ü—é –≥—Ä—É:')

@dp.message_handler(state='set_description')
async def set_description(message: types.Message, state: FSMContext):
    global game_name
    game_description = message.text
    games[game_name]['description'] = game_description
    await state.set_state('set_rating')
    await message.answer(text='–ß—É–¥–æ–≤–æ. –Ø–∫–∏–π —Ä–µ–π—Ç–∏–Ω–≥ —É —Ü—ñ—î—ó –≥—Ä–∏?')

@dp.message_handler(state='set_rating')
async def set_rating(message:types.Message, state: FSMContext):
    global game_name
    game_rating = message.text
    games[game_name]['rating'] = game_rating
    await state.set_state('set_photo')
    await message.answer(text='–ß—É–¥–æ–≤–æ. –¢–µ–ø–µ—Ä –≤–≤–µ–¥–∏ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —Ñ–æ—Ç–æ —Ü—ñ—î—ó –≥—Ä–∏:')

@dp.message_handler(state='set_photo')
async def set_photo(message: types.Message, state: FSMContext):
    global game_name
    game_photo = message.text
    games[game_name]['photo']= game_photo
    with open("games.json", "w", encoding="utf-8") as file:
        json.dump(games, file, indent=4, ensure_ascii=False)
    await message.answer(text='–°—É–ø–µ—Ä! –ù–æ–≤—É –≥—Ä—É —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ –¥–æ –±—ñ–±–ª—ñ–æ—Ç–µ–∫–∏.üòé')
    await state.finish()

async def set_default_commands(dp):
    await bot.set_my_commands(
        [
            types.BotCommand('start', '–ó–∞–ø—É—Å—Ç–∏—Ç–∏ –±–æ—Ç–∞'),
            types.BotCommand('list_games', '–°–ø–∏—Å–æ–∫ —ñ–≥–æ—Ä'),
            types.BotCommand('add_game', '–î–æ–¥–∞—Ç–∏ –Ω–æ–≤—É –≥—Ä—É'),
            types.BotCommand('remove_game', '–í–∏–¥–∞–ª–µ–Ω–Ω—è –≥—Ä–∏ –∑ —Å–ø–∏—Å–∫—É'),
            types.BotCommand('cancel_add_remove', '–°–∫–∞—Å—É–≤–∞—Ç–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—è/–≤–∏–¥–∞–ª–µ–Ω–Ω—è –≥—Ä–∏')
        ]
    )
                
async def on_startup(dp):
    await set_default_commands(dp)
    
if __name__ == '__main__':
    executor.start_polling(dp, on_startup=on_startup)

